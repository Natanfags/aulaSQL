-- MySQL Script generated by MySQL Workbench
-- Fri Nov 23 09:36:23 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Recibo1.1
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Recibo1.1
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Recibo1.1` DEFAULT CHARACTER SET utf8 ;
USE `Recibo1.1` ;

-- -----------------------------------------------------
-- Table `Recibo1.1`.`pessoa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Recibo1.1`.`pessoa` (
  `id` INT(11) NOT NULL,
  `nome` VARCHAR(50) NOT NULL,
  `documento` VARCHAR(14) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Recibo1.1`.`recibo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Recibo1.1`.`recibo` (
  `id` INT(11) NOT NULL,
  `valor` INT(11) NOT NULL,
  `dataEmissao` DATETIME NOT NULL,
  `pessoa_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  /*INDEX `fk_recibo_pessoa1_idx` (`pessoa_id` ASC) VISIBLE,*/
  CONSTRAINT `fk_recibo_pessoa1`
    FOREIGN KEY (`pessoa_id`)
    REFERENCES `Recibo1.1`.`pessoa` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Recibo1.1`.`uf`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Recibo1.1`.`uf` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(2) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Recibo1.1`.`cidade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Recibo1.1`.`cidade` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(60) NOT NULL,
  `uf_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  /*INDEX `fk_cidade_uf_idx` (`uf_id` ASC) VISIBLE,*/
  CONSTRAINT `fk_cidade_uf`
    FOREIGN KEY (`uf_id`)
    REFERENCES `Recibo1.1`.`uf` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Recibo1.1`.`endereco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Recibo1.1`.`endereco` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `tipoLogradouro` VARCHAR(10) NOT NULL,
  `logradouro` VARCHAR(100) NOT NULL,
  `numero` VARCHAR(10) NOT NULL,
  `complemento` VARCHAR(10) NOT NULL,
  `cep` VARCHAR(8) NOT NULL,
  `tipo` INT(11) NOT NULL,
  `cidade_id` INT(11) NOT NULL,
  `pessoa_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  /*INDEX `fk_endereco_cidade1_idx` (`cidade_id` ASC) VISIBLE,
  INDEX `fk_endereco_pessoa1_idx` (`pessoa_id` ASC) VISIBLE,*/
  CONSTRAINT `fk_endereco_cidade1`
    FOREIGN KEY (`cidade_id`)
    REFERENCES `Recibo1.1`.`cidade` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_endereco_pessoa1`
    FOREIGN KEY (`pessoa_id`)
    REFERENCES `Recibo1.1`.`pessoa` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'ENDERECO CLIENTES\n';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

SET SQL_SAFE_UPDATES = 0; /* ativa update atraves da linha de codigo*/

/* 1 - faça insert na tabela UF com todas as siglas dos estados do Brasil.*/
insert into uf (nome)
values ('MG'),
('SP'),
('BA'),
('PR'),
('SC'),
('GO'),
('RS'),
('DF'),
('PA'),
('RJ'),
('PE'),
('CE'),
('ES'),
('AM'),
('AL'),
('MA'),
('MS'),
('MT'),
('PB'),
('RR'),
('RO'),
('RN'),
('TO'),
('PI'),
('SE'),
('AP'),
('AC');


select * from uf;

/*2 - insira as seguintes cidades:
Para o SC
* Chapecó
* Blumenau
* Joinville */

insert into cidade(nome, uf_id)
values ('Chapecó',5),
('Blumenau',5),
('Joinville',5);

/*Para o PR
* Curitiba
* Maringá
* Lunardeli
* Apucarana
* Santa fé
* São Miguel do Iguaçu
* Arapongas
* Ponta Grossa
* Jandaia do Sul*/

insert into cidade(nome, uf_id)
values ('Curitiba',4),
('Maringá',4),
('Lunardeli',4),
('Apucarana',4),
('Santa fé',4),
('São Miguel do Iguaçu',4),
('Arapongas',4),
('Ponta Grossa',4),
('Jandaia do Sul',4);

/*Para o SP
*Ribeirão Preto*/

insert into cidade(nome, uf_id)
values ('Ribeirão Preto',2);

/*3 - Realize a remoção dos estados que não tem cidades*/

select * from cidade;

delete from uf where id in (
select * from (select uf.id from uf left join cidade on cidade.uf_id = uf.id where cidade.uf_id is null) as u
); /* comando que deleta pelo select, selecionado uf.id de uf */

/* 4 - Insira novas cidades no estado de SPs*/

insert into cidade(nome, uf_id)
values ('Franca',2),
('Campinas',2),
('Bauru',2),
('São Carlos',2);

/* 5 - Realize a atualização do nome das cidades:
* Lunardeli para Lunardelli
* Jandaia do Sul para Jandaia
* Maringá para Cidade Canção */

select * from cidade;

update cidade set nome = 'Lunardelli' where nome = 'Lunardeli';

update cidade set nome = 'Jandaia' where nome = 'Jandaia do Sul';

update cidade set nome = 'Cidade Canção' where nome = 'Maringá';

/*6 - Faça um select que retorne o nome das cidades e seus respectivos estados. Ordene por estados e posteriomente pelo nome das cidades */

/*comando para selecionar a cidade.nome a uf.nome de cidade juntos com uf.id ordenando pelo nome*/
select cidade.nome, uf.nome from cidade 
inner join uf on uf.id = cidade.uf_id
order by uf.nome;

/* 7 - Retorne quantas cidades cada estado possui :) (não expliquei ainda)
dica: veja group by e count()*/

select count(uf.id), uf.nome
from uf
inner join cidade on uf.id = cidade.uf_id
group by uf.nome
order by count(uf.nome) desc;

/* 8 - Insira tres pessoas na base de dados. Cada uma destas pessoas deve ter dois enderecos (um comercial e outro residencial). As cidades que devem ser usadas são do estado do PR (você escolhe).*/

insert into pessoa(id, nome, documento)
values (1, 'João',123456789),
(2, 'Antonio',123456789),
(3, 'Pedro',123456789);
 
/*select * from pessoa*/

/*endereços do Joao*/
insert into endereco(id, tipoLogradouro, logradouro, numero, complemento, cep, tipo, cidade_id, pessoa_id)
values(1, 'rua', 'Neo Alves', '182', 'casa', '87035555', 1, 4, 1),
(2, 'rua', 'Olavo Bilac', '685', 'apt01', '87035588', 2, 5, 1);

/*endereço do Antonio*/
insert into endereco(id, tipoLogradouro, logradouro, numero, complemento, cep, tipo, cidade_id, pessoa_id)
values(3, 'av', 'Leonardo DaVinci', '541', 'casa', '87680555', 1, 8, 2),
(4, 'praca', 'Capitao Nascimento', '123', 'bl5 apt5', '87047588', 2, 9, 2);

/*endereço do Pedro*/
insert into endereco(id, tipoLogradouro, logradouro, numero, complemento, cep, tipo, cidade_id, pessoa_id)
values(5, 'travessa', 'Mario Kart', '1011', 'casa', '87410555', 1, 11, 3),
(6, 'av', 'Joao de Barro', '4141', 'casa', '88547588', 2, 12, 3);

/*9 -Insira duas pessoas na base de dados. Cada uma destas pessoas deve ter dois enderecos (um comercial e outro residencial). As cidades que devem ser usadas são do estado de SP (você escolhe).*/

insert into pessoa(id, nome, documento)
values (4, 'Marcio',123456789),
(5, 'Ana',123456789);

/*endereço do Marcio*/
insert into endereco(id, tipoLogradouro, logradouro, numero, complemento, cep, tipo, cidade_id, pessoa_id)
values(7, 'rua', 'Jaime Monjardim', '556', 'casa', '87034105', 1, 16, 4),
(8, 'rua', 'Olavo Bilac', '685', 'apt01', '87035588', 2, 17, 4);

/*endereço da Ana*/
insert into endereco(id, tipoLogradouro, logradouro, numero, complemento, cep, tipo, cidade_id, pessoa_id)
values(9, 'av', 'Brasil', '652', 'sl', '87039635', 1, 15, 5),
(10, 'rua', 'Benedita da Silva', '412', 'casa', '87631588', 2, 14, 5);

/* 10 - Insira duas pessoas na base de dados. Cada uma destas pessoas deve ter um endereco do tipo comercial. As cidades que devem ser usadas são do estado de SC (você escolhe).*/

insert into pessoa(id, nome, documento)
values (6, 'Fabi',123456789),
(7, 'Reginaldo',123456789);

insert into endereco(id, tipoLogradouro, logradouro, numero, complemento, cep, tipo, cidade_id, pessoa_id)
values(11, 'praça', 'Petrobras', '123', 'casa', '87085205', 2, 1, 6),
(12, 'av', 'Nildo Ribeiro', '554', 'casa', '87741205', 2, 2, 7);

/*11 - Faça um select que retorne o nome das pessoas e seus respectivos enderecos (com cidade e estado). Ordene por nome de pessoa, nome do estado e nome da cidade */

SELECT P.NOME, e.logradouro, e.cep, c.nome as cidade, 
u.nome as  estado
FROM PESSOA P
inner join endereco e on e.pessoa_id = p.id
inner join cidade c on c.id = e.cidade_id
inner join uf u on u.id = c.uf_id
order by p.nome, c.nome, u.nome

/*12 - remova todos as pessoas que tem endereço da cidade de Ribeirão Preto*/

Impossivel de resolver 

/*13 - Mude todos os endereços residenciais do sistema. Eles devem ter cep 00000000*/

/*14 - altere o nome da coluna prestador_fk para cliente_fk. */

/*15 - Insira dois recibos sendo que eles devem ter clientes residentes no PR e o prestador de servico deve ser o mesmo (não importando o estado). Exemplo: 
* cliente fusca, da cidade curitiba, no PR. Prestador: DB1, estado PR.
* cliente tamara, da cidade maringá, no PR. Prestador: DB1, estado PR.*/

/*16 - Insira dois recibos sendo que eles devem ter clientes residentes no PR e prestadores de serviços diferentes. Exemplo: 
* cliente fusca, da cidade curitiba, no PR. Prestador: FCV, estado PR.
* cliente tamara, da cidade maringá, no PR. Prestador: USP, estado SP.*/

/*17 - Realize uma consulta na base de dados e exiba os seguintes dados:		
* numero do recibo
* data emissao do recibo
* valor do recibo
* nome do cliente 
* estado do cliente
* nome do emitente
* estado do emitente

ordene por data de recibo, nome do cliente e nome do emitente*/

select r.id as numeroRecibo, 	r.dataEmissao,    r.valor,
	cliente.nome as nomeCliente, ucliente.nome as  ufCliente,
    emitente.nome as nomeEmitente, emit_uf.nome as ufEmitente
  from recibo r
inner join pessoa cliente on cliente.id = r.cliente_fk
inner join endereco ecliente on ecliente.pessoa_id = cliente.id
inner join cidade ccliente on ccliente.id = ecliente.cidade_id
inner join uf ucliente on ucliente.id = ccliente.uf_id
inner join pessoa emitente on emitente.id = r.emitente_fk
inner join endereco emit_end on emit_end.pessoa_id = emitente.id
inner join cidade emit_cidade on emit_cidade.id = emit_end.cidade_id
inner join uf emit_uf on emit_uf.id = emit_cidade.uf_id
order by r.dataEmissao, cliente.nome, emitente.nome

/*18 - Faça uma consulta que mostre:
* quantidade de recibos emitidos no PR
* valor total de recibos emitidos no PR*/

select u.nome as UF, count(r.id) as quantidadeRecibo, 
sum(r.valor) as valorTotal
from recibo r
inner join pessoa p on p.id = r.emitente_fk
inner join endereco e on e.pessoa_id = p.id
inner join cidade c on c.id = e.cidade_id
inner join uf u on u.id = c.uf_id
where u.nome = 'PR'
group by u.nome